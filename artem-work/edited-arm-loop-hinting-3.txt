PROLOGUE: [size=42]
0x5634d23b5600:  push   %rbp
0x5634d23b5601:  push   %rbx
0x5634d23b5602:  push   %r12
0x5634d23b5604:  push   %r13
0x5634d23b5606:  push   %r14
0x5634d23b5608:  push   %r15
0x5634d23b560a:  mov    %rdi,%r14
0x5634d23b560d:  add    $0xfffffffffffffb78,%rsp
0x5634d23b5614:  jmpq   *%rsi
0x5634d23b5616:  xor    %eax,%eax
0x5634d23b5618:  add    $0x488,%rsp
0x5634d23b561f:  pop    %r15
0x5634d23b5621:  pop    %r14
0x5634d23b5623:  pop    %r13
0x5634d23b5625:  pop    %r12
0x5634d23b5627:  pop    %rbx
0x5634d23b5628:  pop    %rbp
0x5634d23b5629:  retq   

----------------
IN: 
0x000100b8:  e3a03004      mov	r3, #4	; 0x4
0x000100bc:  b0811002      addlt	r1, r1, r2
0x000100c0:  e0422001      sub	r2, r2, r1
0x000100c4:  c0411002      subgt	r1, r1, r2
0x000100c8:  e0822001      add	r2, r2, r1
0x000100cc:  e2433001      sub	r3, r3, #1	; 0x1
0x000100d0:  e3530000      cmp	r3, #0	; 0x0
0x000100d4:  1afffff8      bne	0x100bc

popular arg: r1 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1
>>>>>>>>>>>

 ---- 000100b8 00000000 00000000
 movi_i32 tmp5,$0x4
 mov_i32 r3,tmp5                                  sync: 0  dead: 0 1

 ---- 000100bc 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,ge,$L1                      dead: 0 1
>>>>>>>>>>>
 add_i32 tmp6,r1,r2                               dead: 1 2
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1
 set_label $L1
>>>>>>>>>>>

 ---- 000100c0 00000000 00000000
 sub_i32 tmp6,r2,r1                               dead: 1 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100c4 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x1f
 sar_i32 tmp5,tmp5,tmp6                           dead: 1 2
 not_i32 tmp6,tmp5                                dead: 1
 and_i32 tmp5,ZF,tmp6                             dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,eq,$L2                      dead: 0 1
>>>>>>>>>>>
 sub_i32 tmp6,r1,r2                               dead: 1 2
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1
 set_label $L2
>>>>>>>>>>>

 ---- 000100c8 00000000 00000000
 add_i32 tmp6,r2,r1                               dead: 1 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100cc 00000000 00000000
 movi_i32 tmp5,$0x1
 sub_i32 tmp6,r3,tmp5                             dead: 1 2
 mov_i32 r3,tmp6                                  sync: 0  dead: 1

 ---- 000100d0 00000000 00000000
 mov_i32 NF,r3                                    sync: 0  dead: 1
 mov_i32 ZF,NF                                    sync: 0  dead: 1
 movi_i32 CF,$0x1                                 sync: 0  dead: 0
 movi_i32 VF,$0x0                                 sync: 0  dead: 0

 ---- 000100d4 00000000 00000000
 movi_i32 tmp5,$0x0
 brcond_i32 ZF,tmp5,eq,$L3                        dead: 0 1
>>>>>>>>>>>
 goto_tb $0x0
>>>>>>>>>>>
 movi_i32 pc,$0x100bc                             sync: 0  dead: 0
 exit_tb $0x5634d23b5640
>>>>>>>>>>>
 set_label $L3
>>>>>>>>>>>
 goto_tb $0x1
>>>>>>>>>>>
 movi_i32 pc,$0x100d8                             sync: 0  dead: 0
 exit_tb $0x5634d23b5641
>>>>>>>>>>>
 set_label $L0
>>>>>>>>>>>
 exit_tb $0x5634d23b5643
>>>>>>>>>>>

OUT: [size=268]
0x5634d23b56c0:  mov    -0x14(%r14),%ebp
0x5634d23b56c4:  test   %ebp,%ebp
0x5634d23b56c6:  jl     0x5634d23b57bc

0x5634d23b56cc:  mov    0x4(%r14),%ebp

0x5634d23b56d0:  movl   $0x4,0xc(%r14)
0x5634d23b56d8:  mov    0x204(%r14),%ebx
0x5634d23b56df:  mov    0x208(%r14),%r12d
0x5634d23b56e6:  xor    %r12d,%ebx
0x5634d23b56e9:  test   %ebx,%ebx
0x5634d23b56eb:  jge    0x5634d23b56f9
0x5634d23b56f1:  mov    0x8(%r14),%ebx
0x5634d23b56f5:  add    %ebp,%ebx
0x5634d23b56f7:  mov    %ebx,%ebp
0x5634d23b56f9:  mov    0x8(%r14),%ebx
0x5634d23b56fd:  sub    %ebp,%ebx
0x5634d23b56ff:  mov    %ebx,0x8(%r14)
0x5634d23b5703:  mov    0x204(%r14),%ebx
0x5634d23b570a:  mov    0x208(%r14),%r12d
0x5634d23b5711:  xor    %r12d,%ebx
0x5634d23b5714:  sar    $0x1f,%ebx
0x5634d23b5717:  not    %ebx
0x5634d23b5719:  mov    0x20c(%r14),%r12d
0x5634d23b5720:  and    %ebx,%r12d
0x5634d23b5723:  test   %r12d,%r12d
0x5634d23b5726:  je     0x5634d23b5737
0x5634d23b572c:  mov    %ebp,%ebx
0x5634d23b572e:  mov    0x8(%r14),%r12d
0x5634d23b5732:  sub    %r12d,%ebx
0x5634d23b5735:  mov    %ebx,%ebp
0x5634d23b5737:  mov    0x8(%r14),%ebx
0x5634d23b573b:  add    %ebp,%ebx
0x5634d23b573d:  mov    %ebx,0x8(%r14)
0x5634d23b5741:  mov    0xc(%r14),%ebx
0x5634d23b5745:  dec    %ebx
0x5634d23b5747:  mov    %ebx,0xc(%r14)
0x5634d23b574b:  mov    %ebx,0x208(%r14)
0x5634d23b5752:  mov    %ebx,0x20c(%r14)
0x5634d23b5759:  movl   $0x1,0x200(%r14)
0x5634d23b5764:  movl   $0x0,0x204(%r14)
0x5634d23b576f:  test   %ebx,%ebx
0x5634d23b5771:  je     0x5634d23b5798
0x5634d23b5777:  mov    %ebp,0x4(%r14)
0x5634d23b577b:  jmpq   0x5634d23b5780
0x5634d23b5780:  movl   $0x100bc,0x3c(%r14)
0x5634d23b5788:  mov    %ebp,0x4(%r14)
0x5634d23b578c:  lea    -0x153(%rip),%rax        # 0x5634d23b5640
0x5634d23b5793:  jmpq   0x5634d23b5618
0x5634d23b5798:  mov    %ebp,0x4(%r14)
0x5634d23b579c:  xchg   %ax,%ax
0x5634d23b579f:  jmpq   0x5634d23b57a4
0x5634d23b57a4:  movl   $0x100d8,0x3c(%r14)
0x5634d23b57ac:  mov    %ebp,0x4(%r14)
0x5634d23b57b0:  lea    -0x176(%rip),%rax        # 0x5634d23b5641
0x5634d23b57b7:  jmpq   0x5634d23b5618
0x5634d23b57bc:  mov    %ebp,0x4(%r14)
0x5634d23b57c0:  lea    -0x184(%rip),%rax        # 0x5634d23b5643
0x5634d23b57c7:  jmpq   0x5634d23b5618

R00=00000000 R01=fffef136 R02=00000000 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeefb0 R14=00000000 R15=000100b8
PSR=00000010 ---- A usr32
----------------
IN: 
0x000100bc:  b0811002      addlt	r1, r1, r2
0x000100c0:  e0422001      sub	r2, r2, r1
0x000100c4:  c0411002      subgt	r1, r1, r2
0x000100c8:  e0822001      add	r2, r2, r1
0x000100cc:  e2433001      sub	r3, r3, #1	; 0x1
0x000100d0:  e3530000      cmp	r3, #0	; 0x0
0x000100d4:  1afffff8      bne	0x100bc

popular arg: r1 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1
>>>>>>>>>>>

 ---- 000100bc 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,ge,$L1                      dead: 0 1
>>>>>>>>>>>
 add_i32 tmp6,r1,r2                               dead: 1 2
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1
 set_label $L1
>>>>>>>>>>>

 ---- 000100c0 00000000 00000000
 sub_i32 tmp6,r2,r1                               dead: 1 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100c4 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x1f
 sar_i32 tmp5,tmp5,tmp6                           dead: 1 2
 not_i32 tmp6,tmp5                                dead: 1
 and_i32 tmp5,ZF,tmp6                             dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,eq,$L2                      dead: 0 1
>>>>>>>>>>>
 sub_i32 tmp6,r1,r2                               dead: 1 2
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1
 set_label $L2
>>>>>>>>>>>

 ---- 000100c8 00000000 00000000
 add_i32 tmp6,r2,r1                               dead: 1 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100cc 00000000 00000000
 movi_i32 tmp5,$0x1
 sub_i32 tmp6,r3,tmp5                             dead: 1 2
 mov_i32 r3,tmp6                                  sync: 0  dead: 1

 ---- 000100d0 00000000 00000000
 mov_i32 NF,r3                                    sync: 0  dead: 1
 mov_i32 ZF,NF                                    sync: 0  dead: 1
 movi_i32 CF,$0x1                                 sync: 0  dead: 0
 movi_i32 VF,$0x0                                 sync: 0  dead: 0

 ---- 000100d4 00000000 00000000
 movi_i32 tmp5,$0x0
 brcond_i32 ZF,tmp5,eq,$L3                        dead: 0 1
>>>>>>>>>>>
 goto_tb $0x0
>>>>>>>>>>>
 movi_i32 pc,$0x100bc                             sync: 0  dead: 0
 exit_tb $0x5634d23b5800
>>>>>>>>>>>
 set_label $L3
>>>>>>>>>>>
 goto_tb $0x1
>>>>>>>>>>>
 movi_i32 pc,$0x100d8                             sync: 0  dead: 0
 exit_tb $0x5634d23b5801
>>>>>>>>>>>
 set_label $L0
>>>>>>>>>>>
 exit_tb $0x5634d23b5803
>>>>>>>>>>>

OUT: [size=260]
0x5634d23b5880:  mov    -0x14(%r14),%ebp
0x5634d23b5884:  test   %ebp,%ebp
0x5634d23b5886:  jl     0x5634d23b5974

0x5634d23b588c:  mov    0x4(%r14),%ebp      ; global allocator pre-loads value

0x5634d23b5890:  mov    0x204(%r14),%ebx    ; set up condition test
0x5634d23b5897:  mov    0x208(%r14),%r12d
0x5634d23b589e:  xor    %r12d,%ebx
0x5634d23b58a1:  test   %ebx,%ebx

0x5634d23b58a3:  jge    0x5634d23b58b1

0x5634d23b58a9:  mov    0x8(%r14),%ebx      ; jump not taken
0x5634d23b58ad:  add    %ebp,%ebx           ; ebx = ebx + ebp (conditional add)
0x5634d23b58af:  mov    %ebx,%ebp

0x5634d23b58b1:  mov    0x8(%r14),%ebx      ; jump taken
0x5634d23b58b5:  sub    %ebp,%ebx
0x5634d23b58b7:  mov    %ebx,0x8(%r14)      ; sync to arm-r2 mem

0x5634d23b58bb:  mov    0x204(%r14),%ebx    ; setup condition test
0x5634d23b58c2:  mov    0x208(%r14),%r12d
0x5634d23b58c9:  xor    %r12d,%ebx
0x5634d23b58cc:  sar    $0x1f,%ebx
0x5634d23b58cf:  not    %ebx
0x5634d23b58d1:  mov    0x20c(%r14),%r12d
0x5634d23b58d8:  and    %ebx,%r12d
0x5634d23b58db:  test   %r12d,%r12d

0x5634d23b58de:  je     0x5634d23b58ef

0x5634d23b58e4:  mov    %ebp,%ebx           ; jump not taken
0x5634d23b58e6:  mov    0x8(%r14),%r12d
0x5634d23b58ea:  sub    %r12d,%ebx          ; ebx = ebx - e12d (conditional sub)
0x5634d23b58ed:  mov    %ebx,%ebp

0x5634d23b58ef:  mov    0x8(%r14),%ebx      ; jump taken
0x5634d23b58f3:  add    %ebp,%ebx
0x5634d23b58f5:  mov    %ebx,0x8(%r14)      ; sync to arm-r2 mem

0x5634d23b58f9:  mov    0xc(%r14),%ebx      ; decrement loop counter
0x5634d23b58fd:  dec    %ebx
0x5634d23b58ff:  mov    %ebx,0xc(%r14)      ; sync to arm-r3 mem

0x5634d23b5903:  mov    %ebx,0x208(%r14)    ; setup flags to test for loop end
0x5634d23b590a:  mov    %ebx,0x20c(%r14)
0x5634d23b5911:  movl   $0x1,0x200(%r14)
0x5634d23b591c:  movl   $0x0,0x204(%r14)
0x5634d23b5927:  test   %ebx,%ebx

0x5634d23b5929:  je     0x5634d23b5950

0x5634d23b592f:  mov    %ebp,0x4(%r14)          ; sync to arm-r2 mem
0x5634d23b5933:  jmpq   0x5634d23b5938
0x5634d23b5938:  movl   $0x100bc,0x3c(%r14)     ; sync PC to arm-pc mem
0x5634d23b5940:  mov    %ebp,0x4(%r14)          ; sync to arm-r2 mem
0x5634d23b5944:  lea    -0x14b(%rip),%rax        # 0x5634d23b5800
0x5634d23b594b:  jmpq   0x5634d23b5618          ; exit TB

0x5634d23b5950:  mov    %ebp,0x4(%r14)          ; sync to arm-r2 mem
0x5634d23b5954:  xchg   %ax,%ax
0x5634d23b5957:  jmpq   0x5634d23b595c
0x5634d23b595c:  movl   $0x100d8,0x3c(%r14)
0x5634d23b5964:  mov    %ebp,0x4(%r14)          ; sync to arm-r2 mem
0x5634d23b5968:  lea    -0x16e(%rip),%rax        # 0x5634d23b5801
0x5634d23b596f:  jmpq   0x5634d23b5618          ; exit TB
0x5634d23b5974:  mov    %ebp,0x4(%r14)          ; sync to arm-r2 mem
0x5634d23b5978:  lea    -0x17c(%rip),%rax        # 0x5634d23b5803
0x5634d23b597f:  jmpq   0x5634d23b5618          ; exit TB

R00=00000000 R01=fffde26c R02=fffef136 R03=00000003
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeefb0 R14=00000000 R15=000100bc
PSR=20000010 --C- A usr32
R00=00000000 R01=fffcd3a2 R02=fffde26c R03=00000002
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeefb0 R14=00000000 R15=000100bc
PSR=20000010 --C- A usr32
----------------
IN: 
0x000100d8:  e3a00001      mov	r0, #1	; 0x1
0x000100dc:  e59f1014      ldr	r1, [pc, #20]	; 0x100f8
0x000100e0:  e3a0200c      mov	r2, #12	; 0xc
0x000100e4:  e3a07004      mov	r7, #4	; 0x4
0x000100e8:  ef000000      svc	0x00000000

popular arg: r0 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1
>>>>>>>>>>>

 ---- 000100d8 00000000 00000000
 movi_i32 tmp5,$0x1
 mov_i32 r0,tmp5                                  sync: 0  dead: 0 1

 ---- 000100dc 00000000 00000e04
 movi_i32 tmp5,$0x100f8
 mov_i32 tmp7,tmp5                                dead: 1
 qemu_ld_i32 tmp6,tmp7,leul,0                     dead: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1

 ---- 000100e0 00000000 00000000
 movi_i32 tmp5,$0xc
 mov_i32 r2,tmp5                                  sync: 0  dead: 0 1

 ---- 000100e4 00000000 00000000
 movi_i32 tmp5,$0x4
 mov_i32 r7,tmp5                                  sync: 0  dead: 0 1

 ---- 000100e8 00000000 00000000
 movi_i32 pc,$0x100ec                             sync: 0  dead: 0
 movi_i32 tmp5,$0x2
 movi_i32 tmp6,$0x46000000
 movi_i32 tmp7,$0x1
 call exception_with_syndrome,$0x0,$0,env,tmp5,tmp6,tmp7  dead: 0 1 2 3
 set_label $L0
>>>>>>>>>>>
 exit_tb $0x5634d23b59c3
>>>>>>>>>>>

OUT: [size=95]
0x5634d23b5a40:  mov    -0x14(%r14),%ebp
0x5634d23b5a44:  test   %ebp,%ebp
0x5634d23b5a46:  jl     0x5634d23b5a90
0x5634d23b5a4c:  mov    (%r14),%ebp
0x5634d23b5a4f:  mov    $0x1,%ebp
0x5634d23b5a54:  mov    $0x100f8,%ebx
0x5634d23b5a59:  addr32 mov %gs:(%ebx),%ebx
0x5634d23b5a5d:  mov    %ebx,0x4(%r14)
0x5634d23b5a61:  movl   $0xc,0x8(%r14)
0x5634d23b5a69:  movl   $0x4,0x1c(%r14)
0x5634d23b5a71:  movl   $0x100ec,0x3c(%r14)
0x5634d23b5a79:  mov    %r14,%rdi
0x5634d23b5a7c:  mov    $0x2,%esi
0x5634d23b5a81:  mov    $0x46000000,%edx
0x5634d23b5a86:  mov    $0x1,%ecx
0x5634d23b5a8b:  callq  0x5634d2008e9a
0x5634d23b5a90:  mov    %ebp,(%r14)
0x5634d23b5a93:  lea    -0xd7(%rip),%rax        # 0x5634d23b59c3
0x5634d23b5a9a:  jmpq   0x5634d23b5618

R00=00000000 R01=fffab60e R02=fffbc4d8 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeefb0 R14=00000000 R15=000100d8
PSR=60000010 -ZC- A usr32
----------------
IN: 
0x000100ec:  e3a00000      mov	r0, #0	; 0x0
0x000100f0:  e3a07001      mov	r7, #1	; 0x1
0x000100f4:  ef000000      svc	0x00000000

popular arg: r0 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1
>>>>>>>>>>>

 ---- 000100ec 00000000 00000000
 movi_i32 tmp5,$0x0
 mov_i32 r0,tmp5                                  sync: 0  dead: 0 1

 ---- 000100f0 00000000 00000000
 movi_i32 tmp5,$0x1
 mov_i32 r7,tmp5                                  sync: 0  dead: 0 1

 ---- 000100f4 00000000 00000000
 movi_i32 pc,$0x100f8                             sync: 0  dead: 0
 movi_i32 tmp5,$0x2
 movi_i32 tmp6,$0x46000000
 movi_i32 tmp7,$0x1
 call exception_with_syndrome,$0x0,$0,env,tmp5,tmp6,tmp7  dead: 0 1 2 3
 set_label $L0
>>>>>>>>>>>
 exit_tb $0x5634d23b5ac3
>>>>>>>>>>>

OUT: [size=71]
0x5634d23b5b40:  mov    -0x14(%r14),%ebp
0x5634d23b5b44:  test   %ebp,%ebp
0x5634d23b5b46:  jl     0x5634d23b5b78
0x5634d23b5b4c:  mov    (%r14),%ebp
0x5634d23b5b4f:  xor    %ebp,%ebp
0x5634d23b5b51:  movl   $0x1,0x1c(%r14)
0x5634d23b5b59:  movl   $0x100f8,0x3c(%r14)
0x5634d23b5b61:  mov    %r14,%rdi
0x5634d23b5b64:  mov    $0x2,%esi
0x5634d23b5b69:  mov    $0x46000000,%edx
0x5634d23b5b6e:  mov    $0x1,%ecx
0x5634d23b5b73:  callq  0x5634d2008e9a
0x5634d23b5b78:  mov    %ebp,(%r14)
0x5634d23b5b7b:  lea    -0xbf(%rip),%rax        # 0x5634d23b5ac3
0x5634d23b5b82:  jmpq   0x5634d23b5618

R00=0000000c R01=000200fc R02=0000000c R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000004
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeefb0 R14=00000000 R15=000100ec
PSR=60000010 -ZC- A usr32
