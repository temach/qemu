PROLOGUE: [size=42]
0x55ee105d45e0:  push   %rbp
0x55ee105d45e1:  push   %rbx
0x55ee105d45e2:  push   %r12
0x55ee105d45e4:  push   %r13
0x55ee105d45e6:  push   %r14
0x55ee105d45e8:  push   %r15
0x55ee105d45ea:  mov    %rdi,%r14
0x55ee105d45ed:  add    $0xfffffffffffffb78,%rsp
0x55ee105d45f4:  jmpq   *%rsi
0x55ee105d45f6:  xor    %eax,%eax
0x55ee105d45f8:  add    $0x488,%rsp
0x55ee105d45ff:  pop    %r15
0x55ee105d4601:  pop    %r14
0x55ee105d4603:  pop    %r13
0x55ee105d4605:  pop    %r12
0x55ee105d4607:  pop    %rbx
0x55ee105d4608:  pop    %rbp
0x55ee105d4609:  retq   

----------------
IN: 
0x000100b8:  e3a03004      mov	r3, #4	; 0x4
0x000100bc:  b0811002      addlt	r1, r1, r2
0x000100c0:  e0422001      sub	r2, r2, r1
0x000100c4:  c0411002      subgt	r1, r1, r2
0x000100c8:  e0822001      add	r2, r2, r1
0x000100cc:  e2433001      sub	r3, r3, #1	; 0x1
0x000100d0:  e3530000      cmp	r3, #0	; 0x0
0x000100d4:  1afffff8      bne	0x100bc

popular arg: r1 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1

 ---- 000100b8 00000000 00000000
 movi_i32 tmp5,$0x4
 mov_i32 r3,tmp5                                  sync: 0  dead: 0 1

 ---- 000100bc 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,ge,$L1                      dead: 0 1
 add_i32 tmp6,r1,r2                               dead: 1 2 reg: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1 reg: 0
 set_label $L1

 ---- 000100c0 00000000 00000000
 sub_i32 tmp6,r2,r1                               dead: 1 2 reg: 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100c4 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x1f
 sar_i32 tmp5,tmp5,tmp6                           dead: 1 2
 not_i32 tmp6,tmp5                                dead: 1
 and_i32 tmp5,ZF,tmp6                             dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,eq,$L2                      dead: 0 1
 sub_i32 tmp6,r1,r2                               dead: 1 2 reg: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1 reg: 0
 set_label $L2

 ---- 000100c8 00000000 00000000
 add_i32 tmp6,r2,r1                               dead: 1 2 reg: 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100cc 00000000 00000000
 movi_i32 tmp5,$0x1
 sub_i32 tmp6,r3,tmp5                             dead: 1 2
 mov_i32 r3,tmp6                                  sync: 0  dead: 1

 ---- 000100d0 00000000 00000000
 mov_i32 NF,r3                                    sync: 0  dead: 1
 mov_i32 ZF,NF                                    sync: 0  dead: 1
 movi_i32 CF,$0x1                                 sync: 0  dead: 0
 movi_i32 VF,$0x0                                 sync: 0  dead: 0

 ---- 000100d4 00000000 00000000
 movi_i32 tmp5,$0x0
 brcond_i32 ZF,tmp5,eq,$L3                        dead: 0 1
 goto_tb $0x0
 movi_i32 pc,$0x100bc                             sync: 0  dead: 0
 exit_tb $0x55ee105d4640
 set_label $L3
 goto_tb $0x1
 movi_i32 pc,$0x100d8                             sync: 0  dead: 0
 exit_tb $0x55ee105d4641
 set_label $L0
 exit_tb $0x55ee105d4643

OUT: [size=252]
0x55ee105d46c0:  mov    -0x14(%r14),%ebp
0x55ee105d46c4:  test   %ebp,%ebp
0x55ee105d46c6:  jl     0x55ee105d47b0
0x55ee105d46cc:  mov    0x4(%r14),%ebp      ; load arm-r1 into ebp
0x55ee105d46d0:  movl   $0x4,0xc(%r14)
0x55ee105d46d8:  mov    0x204(%r14),%ebx
0x55ee105d46df:  mov    0x208(%r14),%r12d
0x55ee105d46e6:  xor    %r12d,%ebx
0x55ee105d46e9:  test   %ebx,%ebx
0x55ee105d46eb:  jge    0x55ee105d46fb
0x55ee105d46f1:  mov    0x8(%r14),%ebx
0x55ee105d46f5:  add    %ebp,%ebx
0x55ee105d46f7:  mov    %ebx,0x4(%r14)      ; save ebx to arm-r1 mem variable
0x55ee105d46fb:  mov    0x8(%r14),%ebp      ; load arm-r2 into ebp
0x55ee105d46ff:  sub    %ebx,%ebp
0x55ee105d4701:  mov    %ebp,0x8(%r14)
0x55ee105d4705:  mov    0x204(%r14),%ebp
0x55ee105d470c:  mov    0x208(%r14),%r12d
0x55ee105d4713:  xor    %r12d,%ebp
0x55ee105d4716:  sar    $0x1f,%ebp
0x55ee105d4719:  not    %ebp
0x55ee105d471b:  mov    0x20c(%r14),%r12d
0x55ee105d4722:  and    %ebp,%r12d
0x55ee105d4725:  test   %r12d,%r12d
0x55ee105d4728:  je     0x55ee105d473b
0x55ee105d472e:  mov    %ebx,%ebp
0x55ee105d4730:  mov    0x8(%r14),%r12d
0x55ee105d4734:  sub    %r12d,%ebp
0x55ee105d4737:  mov    %ebp,0x4(%r14)
0x55ee105d473b:  mov    0x8(%r14),%ebx
0x55ee105d473f:  add    %ebp,%ebx
0x55ee105d4741:  mov    %ebx,0x8(%r14)
0x55ee105d4745:  mov    0xc(%r14),%ebx
0x55ee105d4749:  dec    %ebx
0x55ee105d474b:  mov    %ebx,0xc(%r14)
0x55ee105d474f:  mov    %ebx,0x208(%r14)
0x55ee105d4756:  mov    %ebx,0x20c(%r14)
0x55ee105d475d:  movl   $0x1,0x200(%r14)
0x55ee105d4768:  movl   $0x0,0x204(%r14)
0x55ee105d4773:  test   %ebx,%ebx
0x55ee105d4775:  je     0x55ee105d4794
0x55ee105d477b:  jmpq   0x55ee105d4780
0x55ee105d4780:  movl   $0x100bc,0x3c(%r14)
0x55ee105d4788:  lea    -0x14f(%rip),%rax        # 0x55ee105d4640
0x55ee105d478f:  jmpq   0x55ee105d45f8
0x55ee105d4794:  xchg   %ax,%ax
0x55ee105d4797:  jmpq   0x55ee105d479c
0x55ee105d479c:  movl   $0x100d8,0x3c(%r14)
0x55ee105d47a4:  lea    -0x16a(%rip),%rax        # 0x55ee105d4641
0x55ee105d47ab:  jmpq   0x55ee105d45f8
0x55ee105d47b0:  lea    -0x174(%rip),%rax        # 0x55ee105d4643
0x55ee105d47b7:  jmpq   0x55ee105d45f8

R00=00000000 R01=fffef11a R02=00000000 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeef90 R14=00000000 R15=000100b8
PSR=00000010 ---- A usr32
----------------
IN: 
0x000100bc:  b0811002      addlt	r1, r1, r2
0x000100c0:  e0422001      sub	r2, r2, r1
0x000100c4:  c0411002      subgt	r1, r1, r2
0x000100c8:  e0822001      add	r2, r2, r1
0x000100cc:  e2433001      sub	r3, r3, #1	; 0x1
0x000100d0:  e3530000      cmp	r3, #0	; 0x0
0x000100d4:  1afffff8      bne	0x100bc

popular arg: r1 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1

 ---- 000100bc 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,ge,$L1                      dead: 0 1
 add_i32 tmp6,r1,r2                               dead: 1 2 reg: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1 reg: 0
 set_label $L1

 ---- 000100c0 00000000 00000000
 sub_i32 tmp6,r2,r1                               dead: 1 2 reg: 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100c4 00000000 00000000
 xor_i32 tmp5,VF,NF                               dead: 1 2
 movi_i32 tmp6,$0x1f
 sar_i32 tmp5,tmp5,tmp6                           dead: 1 2
 not_i32 tmp6,tmp5                                dead: 1
 and_i32 tmp5,ZF,tmp6                             dead: 1 2
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,eq,$L2                      dead: 0 1
 sub_i32 tmp6,r1,r2                               dead: 1 2 reg: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1 reg: 0
 set_label $L2

 ---- 000100c8 00000000 00000000
 add_i32 tmp6,r2,r1                               dead: 1 2 reg: 2
 mov_i32 r2,tmp6                                  sync: 0  dead: 0 1

 ---- 000100cc 00000000 00000000
 movi_i32 tmp5,$0x1
 sub_i32 tmp6,r3,tmp5                             dead: 1 2
 mov_i32 r3,tmp6                                  sync: 0  dead: 1

 ---- 000100d0 00000000 00000000
 mov_i32 NF,r3                                    sync: 0  dead: 1
 mov_i32 ZF,NF                                    sync: 0  dead: 1
 movi_i32 CF,$0x1                                 sync: 0  dead: 0
 movi_i32 VF,$0x0                                 sync: 0  dead: 0

 ---- 000100d4 00000000 00000000
 movi_i32 tmp5,$0x0
 brcond_i32 ZF,tmp5,eq,$L3                        dead: 0 1
 goto_tb $0x0
 movi_i32 pc,$0x100bc                             sync: 0  dead: 0
 exit_tb $0x55ee105d4800
 set_label $L3
 goto_tb $0x1
 movi_i32 pc,$0x100d8                             sync: 0  dead: 0
 exit_tb $0x55ee105d4801
 set_label $L0
 exit_tb $0x55ee105d4803

OUT: [size=244]
0x55ee105d4880:  mov    -0x14(%r14),%ebp
0x55ee105d4884:  test   %ebp,%ebp
0x55ee105d4886:  jl     0x55ee105d4968
0x55ee105d488c:  mov    0x4(%r14),%ebp      ; load arm-r1 into ebp
0x55ee105d4890:  mov    0x204(%r14),%ebx    ;
0x55ee105d4897:  mov    0x208(%r14),%r12d
0x55ee105d489e:  xor    %r12d,%ebx
0x55ee105d48a1:  test   %ebx,%ebx
0x55ee105d48a3:  jge    0x55ee105d48b3
0x55ee105d48a9:  mov    0x8(%r14),%ebx      ; load arm-r2 into ebp
0x55ee105d48ad:  add    %ebp,%ebx           ; ebx = ebp + ebx (conditional add)
0x55ee105d48af:  mov    %ebx,0x4(%r14)      ; save new val to mem arm-r1 var (redundant?)
0x55ee105d48b3:  mov    0x8(%r14),%ebp      ; load arm-r2 into ebp
0x55ee105d48b7:  sub    %ebx,%ebp
0x55ee105d48b9:  mov    %ebp,0x8(%r14)
0x55ee105d48bd:  mov    0x204(%r14),%ebp
0x55ee105d48c4:  mov    0x208(%r14),%r12d
0x55ee105d48cb:  xor    %r12d,%ebp
0x55ee105d48ce:  sar    $0x1f,%ebp
0x55ee105d48d1:  not    %ebp
0x55ee105d48d3:  mov    0x20c(%r14),%r12d
0x55ee105d48da:  and    %ebp,%r12d
0x55ee105d48dd:  test   %r12d,%r12d
0x55ee105d48e0:  je     0x55ee105d48f3
0x55ee105d48e6:  mov    %ebx,%ebp
0x55ee105d48e8:  mov    0x8(%r14),%r12d
0x55ee105d48ec:  sub    %r12d,%ebp
0x55ee105d48ef:  mov    %ebp,0x4(%r14)
0x55ee105d48f3:  mov    0x8(%r14),%ebx
0x55ee105d48f7:  add    %ebp,%ebx
0x55ee105d48f9:  mov    %ebx,0x8(%r14)
0x55ee105d48fd:  mov    0xc(%r14),%ebx
0x55ee105d4901:  dec    %ebx
0x55ee105d4903:  mov    %ebx,0xc(%r14)
0x55ee105d4907:  mov    %ebx,0x208(%r14)
0x55ee105d490e:  mov    %ebx,0x20c(%r14)
0x55ee105d4915:  movl   $0x1,0x200(%r14)
0x55ee105d4920:  movl   $0x0,0x204(%r14)
0x55ee105d492b:  test   %ebx,%ebx
0x55ee105d492d:  je     0x55ee105d494c
0x55ee105d4933:  jmpq   0x55ee105d4938
0x55ee105d4938:  movl   $0x100bc,0x3c(%r14)
0x55ee105d4940:  lea    -0x147(%rip),%rax        # 0x55ee105d4800
0x55ee105d4947:  jmpq   0x55ee105d45f8
0x55ee105d494c:  xchg   %ax,%ax
0x55ee105d494f:  jmpq   0x55ee105d4954
0x55ee105d4954:  movl   $0x100d8,0x3c(%r14)
0x55ee105d495c:  lea    -0x162(%rip),%rax        # 0x55ee105d4801
0x55ee105d4963:  jmpq   0x55ee105d45f8
0x55ee105d4968:  lea    -0x16c(%rip),%rax        # 0x55ee105d4803
0x55ee105d496f:  jmpq   0x55ee105d45f8

R00=00000000 R01=00000020 R02=00000010 R03=00000003
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeef90 R14=00000000 R15=000100bc
PSR=20000010 --C- A usr32
R00=00000000 R01=fffffff6 R02=00000003 R03=00000002
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeef90 R14=00000000 R15=000100bc
PSR=20000010 --C- A usr32
----------------
IN: 
0x000100d8:  e3a00001      mov	r0, #1	; 0x1
0x000100dc:  e59f1014      ldr	r1, [pc, #20]	; 0x100f8
0x000100e0:  e3a0200c      mov	r2, #12	; 0xc
0x000100e4:  e3a07004      mov	r7, #4	; 0x4
0x000100e8:  ef000000      svc	0x00000000

popular arg: env 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1

 ---- 000100d8 00000000 00000000
 movi_i32 tmp5,$0x1
 mov_i32 r0,tmp5                                  sync: 0  dead: 0 1

 ---- 000100dc 00000000 00000e04
 movi_i32 tmp5,$0x100f8
 mov_i32 tmp7,tmp5                                dead: 1
 qemu_ld_i32 tmp6,tmp7,leul,0                     dead: 1
 mov_i32 r1,tmp6                                  sync: 0  dead: 0 1

 ---- 000100e0 00000000 00000000
 movi_i32 tmp5,$0xc
 mov_i32 r2,tmp5                                  sync: 0  dead: 0 1

 ---- 000100e4 00000000 00000000
 movi_i32 tmp5,$0x4
 mov_i32 r7,tmp5                                  sync: 0  dead: 0 1

 ---- 000100e8 00000000 00000000
 movi_i32 pc,$0x100ec                             sync: 0  dead: 0
 movi_i32 tmp5,$0x2
 movi_i32 tmp6,$0x46000000
 movi_i32 tmp7,$0x1
 call exception_with_syndrome,$0x0,$0,env,tmp5,tmp6,tmp7  dead: 0 1 2 3
 set_label $L0
 exit_tb $0x55ee105d49c3

OUT: [size=92]
0x55ee105d4a40:  mov    -0x14(%r14),%ebp
0x55ee105d4a44:  test   %ebp,%ebp
0x55ee105d4a46:  jl     0x55ee105d4a90
0x55ee105d4a4c:  movl   $0x1,(%r14)
0x55ee105d4a53:  mov    $0x100f8,%ebp
0x55ee105d4a58:  addr32 mov %gs:0x0(%ebp),%ebp
0x55ee105d4a5d:  mov    %ebp,0x4(%r14)
0x55ee105d4a61:  movl   $0xc,0x8(%r14)
0x55ee105d4a69:  movl   $0x4,0x1c(%r14)
0x55ee105d4a71:  movl   $0x100ec,0x3c(%r14)
0x55ee105d4a79:  mov    %r14,%rdi
0x55ee105d4a7c:  mov    $0x2,%esi
0x55ee105d4a81:  mov    $0x46000000,%edx
0x55ee105d4a86:  mov    $0x1,%ecx
0x55ee105d4a8b:  callq  0x55ee10227df4
0x55ee105d4a90:  lea    -0xd4(%rip),%rax        # 0x55ee105d49c3
0x55ee105d4a97:  jmpq   0x55ee105d45f8

R00=00000000 R01=00000000 R02=00000001 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeef90 R14=00000000 R15=000100d8
PSR=60000010 -ZC- A usr32
----------------
IN: 
0x000100ec:  e3a00000      mov	r0, #0	; 0x0
0x000100f0:  e3a07001      mov	r7, #1	; 0x1
0x000100f4:  ef000000      svc	0x00000000

popular arg: env 
OP after optimization and liveness analysis:
 ld_i32 tmp5,env,$0xffffffffffffffec              dead: 1
 movi_i32 tmp6,$0x0
 brcond_i32 tmp5,tmp6,lt,$L0                      dead: 0 1

 ---- 000100ec 00000000 00000000
 movi_i32 tmp5,$0x0
 mov_i32 r0,tmp5                                  sync: 0  dead: 0 1

 ---- 000100f0 00000000 00000000
 movi_i32 tmp5,$0x1
 mov_i32 r7,tmp5                                  sync: 0  dead: 0 1

 ---- 000100f4 00000000 00000000
 movi_i32 pc,$0x100f8                             sync: 0  dead: 0
 movi_i32 tmp5,$0x2
 movi_i32 tmp6,$0x46000000
 movi_i32 tmp7,$0x1
 call exception_with_syndrome,$0x0,$0,env,tmp5,tmp6,tmp7  dead: 0 1 2 3
 set_label $L0
 exit_tb $0x55ee105d4ac3

OUT: [size=70]
0x55ee105d4b40:  mov    -0x14(%r14),%ebp
0x55ee105d4b44:  test   %ebp,%ebp
0x55ee105d4b46:  jl     0x55ee105d4b7a
0x55ee105d4b4c:  movl   $0x0,(%r14)
0x55ee105d4b53:  movl   $0x1,0x1c(%r14)
0x55ee105d4b5b:  movl   $0x100f8,0x3c(%r14)
0x55ee105d4b63:  mov    %r14,%rdi
0x55ee105d4b66:  mov    $0x2,%esi
0x55ee105d4b6b:  mov    $0x46000000,%edx
0x55ee105d4b70:  mov    $0x1,%ecx
0x55ee105d4b75:  callq  0x55ee10227df4
0x55ee105d4b7a:  lea    -0xbe(%rip),%rax        # 0x55ee105d4ac3
0x55ee105d4b81:  jmpq   0x55ee105d45f8

R00=0000000c R01=000200fc R02=0000000c R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000004
R08=00000000 R09=00000000 R10=000200fc R11=00000000
R12=00000000 R13=fffeef90 R14=00000000 R15=000100ec
PSR=60000010 -ZC- A usr32
